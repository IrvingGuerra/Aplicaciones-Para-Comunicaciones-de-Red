/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package escomarket;

import java.awt.Image;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import static javax.swing.JOptionPane.showMessageDialog;

/**
 *
 * @author irvingmac
 */
public class Cliente extends javax.swing.JFrame {
    
    int puerto = 1234;
    String host="127.0.0.1";
    
    int x,y;
    
    //Socket
    Socket cl;

    ArrayList<Producto> Inventario = new ArrayList<>(5);
    
    //String pathImg = "/Volumes/BLUE/ESCOM/7/Redes2/Practica 2 - Tienda/Escomarket/src/imgCliente";
    //String pathServ = "/Volumes/BLUE/ESCOM/7/Redes2/Practica 2 - Tienda/Escomarket/src/imgServidor";
    
    String pathImg = "F:\\ESCOM\\7\\Redes2\\Practica 2 - Tienda\\Escomarket\\src\\imgCliente";
    String pathServ = "F:\\ESCOM\\7\\Redes2\\Practica 2 - Tienda\\Escomarket\\src\\imgServidor";
    
    Producto productoSelected = null;
    
    ArrayList<Carrito> myCarrito = new ArrayList<>(5);
    /**
     * Creates new form Cliente
     */
    public Cliente() {
        initComponents();
        this.setLocationRelativeTo(null);
        //Cargamos el  inventario o catalogo
        Inventario = CargarInventario();
        loadImagenes();
        loadInfoInventarioJFRAME();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSalir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        InventarioList = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        nombreSelected = new javax.swing.JLabel();
        marcaSelected = new javax.swing.JLabel();
        descripcionSelected = new javax.swing.JLabel();
        precioSelected = new javax.swing.JLabel();
        existSelected = new javax.swing.JLabel();
        lblIMG = new javax.swing.JLabel();
        btnAddCarrito = new javax.swing.JButton();
        btnDeleteCarrito = new javax.swing.JButton();
        btnVaciar = new javax.swing.JButton();
        btnVer = new javax.swing.JButton();
        btnFin = new javax.swing.JButton();
        FondoCliente = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        getContentPane().add(btnSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 10, -1, -1));

        jLabel1.setText("Productos disponibles");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 150, 30));

        InventarioList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        InventarioList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                InventarioListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(InventarioList);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 670, 90));

        jLabel2.setText("Producto seleccionado");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, -1, 20));

        jLabel3.setText("Nombre: ");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, -1, -1));

        jLabel4.setText("Marca:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, -1, -1));

        jLabel5.setText("Descripcion:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, -1, -1));

        jLabel6.setText("Precio:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, -1, -1));

        jLabel7.setText("Existencias:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, -1, 20));

        nombreSelected.setText("Sin seleccionar");
        getContentPane().add(nombreSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 190, 200, 20));

        marcaSelected.setText("Sin seleccionar");
        getContentPane().add(marcaSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 220, -1, -1));

        descripcionSelected.setText("Sin seleccionar");
        getContentPane().add(descripcionSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 250, -1, -1));

        precioSelected.setText("Sin seleccionar");
        getContentPane().add(precioSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 280, -1, -1));

        existSelected.setText("Sin seleccionar");
        getContentPane().add(existSelected, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 310, -1, -1));

        lblIMG.setText("IMAGEN");
        getContentPane().add(lblIMG, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 150, 200, 180));

        btnAddCarrito.setText("+");
        btnAddCarrito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCarritoActionPerformed(evt);
            }
        });
        getContentPane().add(btnAddCarrito, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 150, 40, 30));

        btnDeleteCarrito.setText("-");
        btnDeleteCarrito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCarritoActionPerformed(evt);
            }
        });
        getContentPane().add(btnDeleteCarrito, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 180, 40, 30));

        btnVaciar.setText("Vaciar Carrito");
        btnVaciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVaciarActionPerformed(evt);
            }
        });
        getContentPane().add(btnVaciar, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 220, 130, 30));

        btnVer.setText("Ver Carrito");
        btnVer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerActionPerformed(evt);
            }
        });
        getContentPane().add(btnVer, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 250, 130, 30));

        btnFin.setText("Finalizar Compra");
        btnFin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinActionPerformed(evt);
            }
        });
        getContentPane().add(btnFin, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 280, 130, 30));

        FondoCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/wall1.jpg"))); // NOI18N
        FondoCliente.setText("jLabel1");
        FondoCliente.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                FondoClienteMouseDragged(evt);
            }
        });
        FondoCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                FondoClienteMousePressed(evt);
            }
        });
        getContentPane().add(FondoCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 710, 370));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnSalirActionPerformed

    private void FondoClienteMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FondoClienteMousePressed
        x = evt.getX();
        y = evt.getY();
    }//GEN-LAST:event_FondoClienteMousePressed

    private void FondoClienteMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FondoClienteMouseDragged
        this.setLocation(this.getLocation().x + evt.getX() -x,this.getLocation().y + evt.getY() -y);
    }//GEN-LAST:event_FondoClienteMouseDragged

    private void InventarioListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_InventarioListMouseClicked
        Object sel =null; 
        int[] selectedIx = this.InventarioList.getSelectedIndices();      
        for (int i = 0; i < selectedIx.length; i++) {
            sel = InventarioList.getModel().getElementAt(selectedIx[i]);
        }
        
        String aux = sel.toString();
        String[] ind = aux.split("-");
        
        int indice = Integer.valueOf(ind[0]);
        
        productoSelected = Inventario.get(indice);
        
        nombreSelected.setText(productoSelected.getNombre());
        marcaSelected.setText(productoSelected.getMarca());
        precioSelected.setText(""+productoSelected.getPrecio()); 
        descripcionSelected.setText(productoSelected.getDescripcion());
        existSelected.setText(""+productoSelected.getExistencias());
        
        String nameFile = "/imgCliente"+productoSelected.getImagen().toString().replace(pathServ, "");

        ImageIcon imagen = new javax.swing.ImageIcon(getClass().getResource(nameFile));
        Icon icono = new javax.swing.ImageIcon(imagen.getImage().getScaledInstance(lblIMG.getWidth(),lblIMG.getHeight(),Image.SCALE_DEFAULT));
        lblIMG.setIcon(icono);
        
    }//GEN-LAST:event_InventarioListMouseClicked

    private void btnAddCarritoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCarritoActionPerformed

        if(productoSelected != null){
            int indiceProducto = productoSelected.getID();
            int existencias = Inventario.get(indiceProducto).getExistencias();
            
            if(existencias>0){
                Inventario.get(indiceProducto).setExistencias(existencias-1);
                existSelected.setText(""+Inventario.get(indiceProducto).getExistencias());
                if (existeEnCarrito(myCarrito,indiceProducto) == false){
                    System.out.println("No existe");
                    Carrito aux = new Carrito(indiceProducto,1);
                    myCarrito.add(aux);
                }else{
                    System.out.println("Existe");
                    int indice = getIndiceExisteEnCarrito(myCarrito,indiceProducto);
                    int exits = myCarrito.get(indice).getCantidad();
                    myCarrito.get(indice).setCantidad(exits+1);
                    System.out.println(myCarrito.get(indice).getCantidad());
                }

            }else{
                showMessageDialog(null, "[ FAIL ] No hay existencias del producto"); 
            }
        }else{
            showMessageDialog(null, "[ FAIL ] Seleccione un producto para agregar o eliminar del carrito");
        }
    }//GEN-LAST:event_btnAddCarritoActionPerformed

    private void btnDeleteCarritoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCarritoActionPerformed
        if(productoSelected != null){
            int indiceProducto = productoSelected.getID();
            int existencias = Inventario.get(indiceProducto).getExistencias();

            if (existeEnCarrito(myCarrito,indiceProducto) == false){
                //nada, no tiene ni mais
            }else{
                System.out.println("Existe");
                int indice = getIndiceExisteEnCarrito(myCarrito,indiceProducto);
                int exits = myCarrito.get(indice).getCantidad();
                if(exits>0){
                    myCarrito.get(indice).setCantidad(exits-1);
                    System.out.println(myCarrito.get(indice).getCantidad());
                    Inventario.get(indiceProducto).setExistencias(existencias+1);
                    existSelected.setText(""+Inventario.get(indiceProducto).getExistencias());
                }
                    
            }

        }else{
            showMessageDialog(null, "[ FAIL ] Seleccione un producto para agregar o eliminar del carrito");
        }
    }//GEN-LAST:event_btnDeleteCarritoActionPerformed

    private void btnVaciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVaciarActionPerformed
        Inventario = CargarInventario();
        loadInfoInventarioJFRAME();
        productoSelected = Inventario.get(productoSelected.getID());
        nombreSelected.setText(productoSelected.getNombre());
        marcaSelected.setText(productoSelected.getMarca());
        precioSelected.setText(""+productoSelected.getPrecio()); 
        descripcionSelected.setText(productoSelected.getDescripcion());
        existSelected.setText(""+productoSelected.getExistencias());
        vaciarCarrito();
    }//GEN-LAST:event_btnVaciarActionPerformed

    private void btnVerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerActionPerformed
        String misCosas = "";
        for(int i = 0;i<myCarrito.size();i++){
            misCosas += Inventario.get(myCarrito.get(i).getProducto()).getNombre() + " Cantidad: "+myCarrito.get(i).getCantidad()+"\n";
        }
        showMessageDialog(null, "[ OK ] Mostrando inventario...\n\n"+misCosas);
    }//GEN-LAST:event_btnVerActionPerformed

    private void btnFinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinActionPerformed
        if(myCarrito.isEmpty()){
            showMessageDialog(null, "[ FAIL ] Tu carrito esta vacio");
        }else{
            connectWithServer();
            try{
                PrintWriter pw = new PrintWriter(new OutputStreamWriter(cl.getOutputStream()));
                pw.println("3"); //Le mandamos un 3, indicando que queremos comprar
                pw.flush();
                System.out.println("[ OK ] Preparado para comprar...");
                Producto p;
                ObjectOutputStream obj = new ObjectOutputStream(cl.getOutputStream());
                obj.writeObject(myCarrito);
                obj.flush();
                System.out.println("[ OK ] Carrito de comnpras enviado!");
                obj.close();
                pw.close();
                cl.close();

            }catch(Exception e){
                showMessageDialog(null, "[ FAIL ] Ocurrio un problema al recibir los productos");
            }
            showMessageDialog(null, "[ OK ] Gracias por comprar con nosotros");
            Inventario = CargarInventario();
            loadInfoInventarioJFRAME();
            productoSelected = Inventario.get(productoSelected.getID());
            nombreSelected.setText(productoSelected.getNombre());
            marcaSelected.setText(productoSelected.getMarca());
            precioSelected.setText(""+productoSelected.getPrecio()); 
            descripcionSelected.setText(productoSelected.getDescripcion());
            existSelected.setText(""+productoSelected.getExistencias());
            vaciarCarrito();
        }
    }//GEN-LAST:event_btnFinActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cliente().setVisible(true);
            }
        });
    }
    
    private void connectWithServer() {
        //Nos conectamos con els ervidor local.
        try{
            cl = new Socket (host, puerto); //socket bloquante
            System.out.println("[ OK ] Conectado!");
        }catch(Exception e){
            showMessageDialog(null, "[ FAIL ] Ocurrio un problema con el servidor");
        }
            
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel FondoCliente;
    private javax.swing.JList<String> InventarioList;
    private javax.swing.JButton btnAddCarrito;
    private javax.swing.JButton btnDeleteCarrito;
    private javax.swing.JButton btnFin;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton btnVaciar;
    private javax.swing.JButton btnVer;
    private javax.swing.JLabel descripcionSelected;
    private javax.swing.JLabel existSelected;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblIMG;
    private javax.swing.JLabel marcaSelected;
    private javax.swing.JLabel nombreSelected;
    private javax.swing.JLabel precioSelected;
    // End of variables declaration//GEN-END:variables

    private ArrayList<Producto> CargarInventario() {
        ArrayList<Producto> Catalogo = new ArrayList<>(5);
        connectWithServer();
        try{
            PrintWriter pw = new PrintWriter(new OutputStreamWriter(cl.getOutputStream()));
            pw.println("1"); //Le mandamos un 1, indicando que queremos cargar objetos
            pw.flush();
            System.out.println("[ OK ] Preparado para recibir objetos...");
            Producto p;
            ObjectInputStream ois = new ObjectInputStream(cl.getInputStream());
            
                for(int i=0;i<5;i++){
                    p = (Producto) ois.readObject();
                    Catalogo.add(i, p);
                    System.out.println("[ OK ] Objeto recibido: " +
                    Catalogo.get(i).getID() + "," +
                    Catalogo.get(i).getNombre() + "," +
                    Catalogo.get(i).getMarca() + "," +
                    Catalogo.get(i).getDescripcion() + "," +
                    Catalogo.get(i).getPrecio());
                }
                
            ois.close();
            cl.close();
            
        }catch(Exception e){
            showMessageDialog(null, "[ FAIL ] Ocurrio un problema al recibir los productos");
        }
        System.out.println("[ OK ] Cantidad de productos recibidos: "+Catalogo.size());
        return Catalogo;
    }

    private void loadImagenes() {
        System.out.println("[ OK ] Cargando imagenes de productos");
        for(int j=0;j<Inventario.size();j++){
            DescargaImagen(Inventario.get(j).getNombre());
        }
    }

    private void DescargaImagen(String nombreImg) {
        connectWithServer();
        try{
            PrintWriter pw = new PrintWriter(new OutputStreamWriter(cl.getOutputStream()));
            byte[] b = new byte[1500];
            long recibidos = 0;
            int n,porcentaje = 0;
            pw.println("2");
            pw.flush();
            System.out.println("[ OK ] Inicia descarga de imagenen del prodcuto "+nombreImg);
            pw.println(nombreImg);
            pw.flush();
            DataInputStream dis = new DataInputStream(cl.getInputStream());
            String nombres = dis.readUTF();
            long tam = dis.readLong();
            System.out.println("[ OK ] Iniciando recepcion del archivo: "+nombres+" de tamaño: "+tam);
            File ff= new File(pathImg);
            String pathDest = ff.getAbsolutePath();
            DataOutputStream dos = new DataOutputStream(new FileOutputStream(pathDest+"/"+nombres));
            System.out.println("[ OK ] Se guardara el archivo: "+pathDest+"/"+nombres);
            while(recibidos<tam){
                n = dis.read(b);
                recibidos+=n;
                dos.write(b,0,n);
                dos.flush();
                porcentaje = (int)((recibidos*100)/tam);
                System.out.println("[ OK ] Recibido el "+porcentaje+" %");
            }
            System.out.println("[ OK ] Imagen recibida con exito.");
            dos.close();
            dis.close();
            pw.close();
            cl.close();
        }catch(Exception e){
            showMessageDialog(null, "[ FAIL ] Ocurrio un problema al recibir las imagenes");
        }
    }

    private void loadInfoInventarioJFRAME() {
        String[] data = new String [Inventario.size()];
        for(int i = 0;i<Inventario.size();i++){
           data[i] = i+"-"+Inventario.get(i).getNombre();
        }
        InventarioList.setListData(data);
    }

    private boolean existeEnCarrito(ArrayList<Carrito> myCarrito, int indiceProducto) {
        for(Carrito p:myCarrito)if (p.getProducto() == indiceProducto)return true;return false;
    }

    private int getIndiceExisteEnCarrito(ArrayList<Carrito> myCarrito, int indiceProducto) {
        for(int i = 0;i<myCarrito.size();i++){
            if (myCarrito.get(i).getProducto()==indiceProducto){
                return i;
            }
        }
        return 0;
    }

    private void vaciarCarrito() {
        while(myCarrito.isEmpty()==false){
            myCarrito.remove(0);
        }
    }


    
}
